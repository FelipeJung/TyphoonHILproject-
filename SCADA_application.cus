<ui_settings>
    <version>2.3</version>
    <model_locked>False</model_locked>
    <canvas_bg_color>#000000</canvas_bg_color>
    <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts.
# NOTE: This code is always executed prior simulation start.

# Variable 'SETTINGS_DIR' holds directory where loaded Panel .cus file is located.
# Also you can call 'get_settings_dir_path()' function in any
# Macro and Expression scripts to get the same directory.
SETTINGS_DIR = get_settings_dir_path()

# The 'add_to_python_path(folder)' function can be used to add custom folder
# with Python files and packages to the PYTHONPATH. After folder is added, all Python 
# files and Python packages from it can be imported into the SCADA Namespace.

# HIL API is imported as 'hil'
# Numpy module is imported as 'np'
# Scipy module is imported as 'sp'
# Schematic Editor model namespace is imported as 'scm'
# Function for printing to HIL SCADA Message log is imported as 'printf'.

]]></initialization_code>
    <components>
        <component_data>
                <id>785069da27ba11e9b341083e8eb3816e</id>
                <name><![CDATA[Input Current]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Ia1']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>black</background_color>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>832</x>
                    <y>576</y>
                    <width>448</width>
                    <height>296</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[time (s)]]></x_title>
                    <y_title><![CDATA[Current (A)]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>200.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>True</x_axis_title_enabled>
                    <y_axis_title_enabled>True</y_axis_title_enabled>
                    <use_reference_curve>True</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
P = hil.read_analog_signal(name='V_ref_calc')*hil.read_analog_signal(name='V_ref_calc')/4.813
curveData = P/hil.read_analog_signal(name='Battery_voltage')

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'green',

    # curve line width: float number
    "line_width": 1.0,
    
    # reference curve title
    "title": "Ref",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>3f26bfdc258a11e99462083e8eb3816e</id>
                <name><![CDATA[Processed Power]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Pout']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>black</background_color>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>832</x>
                    <y>16</y>
                    <width>432</width>
                    <height>272</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[time (s)]]></x_title>
                    <y_title><![CDATA[Power (W)]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>50000.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>True</x_axis_title_enabled>
                    <y_axis_title_enabled>True</y_axis_title_enabled>
                    <use_reference_curve>True</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = hil.read_analog_signal(name='V_ref_calc')*hil.read_analog_signal(name='V_ref_calc')/4.813

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'green',

    # curve line width: float number
    "line_width": 1.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d10ab76c258d11e9bb04083e8eb3816e</id>
                <name><![CDATA[Output Voltage]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Vout']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>black</background_color>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>832</x>
                    <y>304</y>
                    <width>440</width>
                    <height>272</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[time (s)]]></x_title>
                    <y_title><![CDATA[Voltage (V)]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>450.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>False</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>True</x_axis_title_enabled>
                    <y_axis_title_enabled>True</y_axis_title_enabled>
                    <use_reference_curve>True</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = hil.read_analog_signal(name='V_ref_calc')

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'green',

    # curve line width: float number
    "line_width": 1.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>507f3bbb27b511e9b59b083e8eb3816e</id>
                <name><![CDATA[Cause Overload]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[hil.set_scada_input_value('Aciona_carga', 1.0)]]></on_use_code>
                <on_start_code active="False"><![CDATA[None]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>88</y>
                    <width>176</width>
                    <height>32</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>2f5f3a3527b611e98c58083e8eb3816e</id>
                <name><![CDATA[Enable Converter]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[
# HIL API is imported as 'hil'
if hil.read_digital_signal('Enabled') == True:
    hil.set_scada_input_value('Enable', 0)
else:
    hil.set_scada_input_value('Enable', 1)



]]></on_use_code>
                <on_start_code active="False"><![CDATA[None]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>8</y>
                    <width>176</width>
                    <height>32</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>48fe7e1a27b411e982eb083e8eb3816e</id>
                <name><![CDATA[Group]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['e630694627b911e9b8ed083e8eb3816e']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>8</x>
                    <y>184</y>
                    <width>776</width>
                    <height>304</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>ef18498827b311e9b5d2083e8eb3816e</id>
                <name><![CDATA[STATUS AND COMMANDS]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['507f3bbb27b511e9b59b083e8eb3816e', '2f5f3a3527b611e98c58083e8eb3816e', '507f3bba27b511e989f5083e8eb3816e', 'a7844dfa27b511e99e21083e8eb3816e', 'a7844dfb27b511e9bf2d083e8eb3816e', '2f5f3a3427b611e9bb23083e8eb3816e']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#000000</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>8</x>
                    <y>8</y>
                    <width>200</width>
                    <height>168</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a58d91081a5011e98656083e8eb3816e</id>
                <name><![CDATA[]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Vout]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1176</x>
                    <y>304</y>
                    <width>88</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>ed9adde21a5811e9b781083e8eb3816e</id>
                <name><![CDATA[Capture/Scope]]></name>
                <type>Capture/Scope</type>
                <description><![CDATA[]]></description>
                <hierarchy_position>1</hierarchy_position>
                <working_mode>embedded</working_mode>
                <widget_settings>
                    <x>8</x>
                    <y>496</y>
                    <width>792</width>
                    <height>360</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <state>Scope</state>
                    <layout>None</layout>
                    <presets>
                        <active_capture_preset>Default</active_capture_preset>
                        <active_scope_preset>Default</active_scope_preset>
                        <capture name="Default">
                            <time_interval>1.0</time_interval>
                            <sample_rate>2000000.0</sample_rate>
                            <background_color>False</background_color>
                            <layout>Grid</layout>
                            <legend>True</legend>
                            <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Vout</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Lin</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>V_ref_calc</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Battery_voltage</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                           </viewports>
                        </analog>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>False</is_force>
                                <type>Analog</type>
                                <source>Lin</source>
                                <edge>Rising edge</edge>
                                <treshold>180.0</treshold>
                                <offset>50.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                            <plotting_options in_use="False">
                            
                                <subplots>
                                    </subplots>
                            </plotting_options>
                        </capture>
                        <scope name="Default">
                            <background_color>True</background_color>
                            <layout>Grid</layout>
                            <legend>True</legend>
                            <show_viewports>2</show_viewports>
                            <decimation>1</decimation>
                            <time_base>0.0001</time_base>
                            <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Lin</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Vout</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>Ia1</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Input</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>4</channel>
                            <name>Pout</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>5</channel>
                            <name>Battery_voltage</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                           </viewports>
                        </analog>
                            </analog_signals>
                            <digital_signals>
                            <digital>
                            <channel>0</channel>
                            <name>Boost.PWM_Modulator_TOP_1</name>
                            <vertical_offset>0.0</vertical_offset>
                            <viewports>
                                
                           </viewports>
                        </digital>
                            </digital_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>False</is_force>
                                <type>Analog</type>
                                <source>Lin</source>
                                <edge>Falling edge</edge>
                                <treshold>100.0</treshold>
                                <offset>0.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                        </scope>
                        </presets>
                    <capture>
                        <time_interval>1.0</time_interval>
                        <sample_rate>2000000.0</sample_rate>
                        <background_color>False</background_color>
                        <layout>Grid</layout>
                        <legend>True</legend>
                        <trigger>
                            <type>Analog</type>
                            <source>Lin</source>
                            <edge>Rising edge</edge>
                            <treshold>180.0</treshold>
                            <offset>50.0</offset>
                            <useFirstTrigger>False</useFirstTrigger>
                        </trigger>

                        <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Vout</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Lin</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>V_ref_calc</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Battery_voltage</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                           </viewports>
                        </analog>
                            </analog_signals>

                         <digital_signals>
                            </digital_signals>

                    </capture>

                    <scope>
                        <time_base>0.0001 </time_base>
                        <background_color>True</background_color>
                        <layout>Grid</layout>
                        <legend>True</legend>
                        <trigger>
                            <mode>Normal</mode>
                            <type>Analog</type>
                            <source>Lin</source>
                            <edge>Falling edge</edge>
                            <treshold>100.0</treshold>
                            <offset>0.0</offset>
                        </trigger>

                         <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Lin</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Vout</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>Ia1</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Input</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>4</channel>
                            <name>Pout</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>5</channel>
                            <name>Battery_voltage</name>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                           </viewports>
                        </analog>
                            </analog_signals>

                        <digital_signals>
                            <digital>
                            <channel>0</channel>
                            <name>Boost.PWM_Modulator_TOP_1</name>
                            <vertical_offset>0.0</vertical_offset>
                            <viewports>
                                
                           </viewports>
                        </digital>
                            </digital_signals>

                    </scope>
                    <plotting_options in_use="False">
                    
                        <subplots>
                            </subplots>
                    </plotting_options>
                </widget_settings>

            </component_data>
        <component_data>
                <id>56f8d3cc24af11e98403083e8eb3816e</id>
                <name><![CDATA[]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Pout]]></signal_name>
                <unit><![CDATA[W]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[0]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1144</x>
                    <y>24</y>
                    <width>112</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>64a3809424af11e99569083e8eb3816e</id>
                <name><![CDATA[]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Ia1]]></signal_name>
                <unit><![CDATA[A]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1176</x>
                    <y>584</y>
                    <width>96</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>12c0164a259111e99f81083e8eb3816e</id>
                <name><![CDATA[]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'

]]></on_click_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

]]></on_start_code>
                <on_timer_code active="True"><![CDATA[
# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'
if (hil.read_digital_signal(name='Protecao')):
    hil.set_scada_input_value('Reset', 0)

if (hil.read_analog_signal(name='Vout') == 0):
    hil.set_scada_input_value('Reset', 0)

    

]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>912</x>
                    <y>912</y>
                    <width>128</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>507f3bba27b511e989f5083e8eb3816e</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[extra_load]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off

if hil.read_digital_signal(name='Enabled'):
    displayValue = True
else:
    displayValue = False]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>120</x>
                    <y>88</y>
                    <width>24</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a7844dfa27b511e99e21083e8eb3816e</id>
                <name><![CDATA[Reset Error]]></name>
                <type>MacroButton</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[hil.set_scada_input_value('Reset', 1)
hil.set_scada_input_value('Aciona_carga', 0.0)
]]></on_use_code>
                <on_start_code active="False"><![CDATA[None]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>48</y>
                    <width>176</width>
                    <height>32</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a7844dfb27b511e9bf2d083e8eb3816e</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Protecao]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off

if hil.read_digital_signal(name='Protecao'):
    displayValue = False
else:
    displayValue = True]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>120</x>
                    <y>48</y>
                    <width>24</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>2f5f3a3427b611e9bb23083e8eb3816e</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[Enabled]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off

if hil.read_digital_signal(name='Enabled'):
    displayValue = True
else:
    displayValue = False]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>120</x>
                    <y>8</y>
                    <width>24</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>4cb7942427b811e9870b083e8eb3816e</id>
                <name><![CDATA[SETPOINT]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['6000151227b811e99058083e8eb3816e', '69c9cbdc27b811e994c5083e8eb3816e']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#000000</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>216</x>
                    <y>8</y>
                    <width>320</width>
                    <height>168</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>6000151227b811e99058083e8eb3816e</id>
                <name><![CDATA[Output Voltage Reference]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'

hil.set_scada_input_value('Voltage_reference', inputValue)
]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.

]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.

]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[380.0]]></inputValue>
                <min>240.0</min>
                <max>450.0</max>
                <step>5.0</step>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>16</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>69c9cbdc27b811e994c5083e8eb3816e</id>
                <name><![CDATA[Input Voltage]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[hil.set_source_constant_value('Input', value=inputValue)
# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
hil.set_source_constant_value('Input', value=240)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.

]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.

]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[220.0]]></inputValue>
                <min>150.0</min>
                <max>300.0</max>
                <step>5.0</step>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>80</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>e630694627b911e9b8ed083e8eb3816e</id>
                <name><![CDATA[Image component]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[Boost_resistive_load.PNG]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8</x>
                    <y>8</y>
                    <width>744</width>
                    <height>264</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Transparent]]></background_type>
                    <is_background>False</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>05daa17427bd11e9a485083e8eb3816e</id>
                <name><![CDATA[Gauge]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Battery_voltage]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>552</x>
                    <y>24</y>
                    <width>248</width>
                    <height>144</height>
                    <appearance><![CDATA[Raised]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>150.0</min>
                    <max>300.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        </components>
</ui_settings>